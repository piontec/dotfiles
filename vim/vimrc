set rtp+=~/.vim/bundle/Vundle.vim

call vundle#begin()
  Plugin 'gmarik/Vundle.vim'
  Plugin 'bling/vim-airline'
  Plugin 'ekalinin/Dockerfile.vim'
  Plugin 'jlanzarotta/bufexplorer'
  Plugin 'scrooloose/nerdtree'
  Plugin 'LaTeX-Box-Team/LaTeX-Box'
  Plugin 'pearofducks/ansible-vim'
  Plugin 'majutsushi/tagbar'
  Plugin 'tomtom/tcomment_vim'
  " Plugin 'altercation/vim-colors-solarized'
  " Plugin 'fatih/vim-go'
  " tabular always before vim-markdown
  Plugin 'godlygeek/tabular'
  Plugin 'plasticboy/vim-markdown'
  Plugin 'Shougo/neocomplete.vim'
  Plugin 'm-kat/aws-vim'
  Plugin 'elzr/vim-json'
  Plugin 'tpope/vim-surround'
"  Plugin 'vim-scripts/ZoomWin'
  Plugin 'michaeljsmith/vim-indent-object'
  "Plugin 'tpope/vim-fugitive'
  "  Plugin 'Valloric/YouetompleteMe'
  " Plugin 'derekwyatt/vim-scala'
  "Plugin 'junegunn/goyo.vim'
"  Plugin 'chriskempson/base16-vim'
call vundle#end()

" mv between windows
nnoremap <silent> <C-l> <c-w>l
nnoremap <silent> <C-h> <c-w>h
nnoremap <silent> <C-k> <c-w>k
nnoremap <silent> <C-j> <c-w>j

if has("nvim") 
  set backspace=2

  let g:resu = ""
  function JobHandler(job_id, data, event)
    if a:event == 'stdout'
       let str = self.shell.' out: '.join(a:data)
       let g:resu = g:resu."\n".str
    elseif a:event == 'stderr'
      let str = self.shell.' err: '.join(a:data)
      let g:resu = g:resu."\n".str
    else
      :cexpr g:resu
      let g:resu = ""
    endif
  endfunction
  let callbacks = {
        \ 'on_stdout': function('JobHandler'),
        \ 'on_stderr': function('JobHandler'),
        \ 'on_exit': function('JobHandler')
        \ }
  " map <leader>lx <Esc>:call jobstart("xelatex.sh +3 +b +o +n \"main.tex\"", extend({'shell': 'xelatex'}, callbacks))<CR>
  map <leader>lx <Esc>:call jobstart("rubber -s -f --pdf --module xelatex \"main\"", extend({'shell': 'rubber'}, callbacks))<CR>
else 
  map <leader>lb  <Esc>:!pdflatex.sh +3 +b +o "%:p"<CR>
  map <leader>ll  <Esc>:!pdflatex.sh +3 +o "%:p"<CR>
  map <leader>lck <Esc>:!pdflatex.sh -kk "%:p"<CR>
  map <leader>lm <Esc>:!pdflatex.sh +3 +b +o "main.tex"<CR>
  " map <leader>lx <Esc>:!xelatex.sh +3 +b +o "main.tex"<CR>
  map <leader>lx <Esc>:!rubber -s -f --pdf --module xelatex "main.tex"<CR>
endif

syntax on
" error in < 7.4
if v:version > 704 
  set regexpengine=1
endif

" NERD
nmap <silent> <F7> :NERDTreeToggle<CR>
nmap <silent> <F8> :TagbarToggle<CR>

set nocompatible
set hlsearch
" tabs and firends
set autoindent
set smartindent
set expandtab
set tabstop=2
set shiftwidth=2
set textwidth=100
set ignorecase 
set smartcase
set incsearch
set autochdir
" directory for swp files
set directory=/tmp
set wildmenu
set wildmode=longest,list
set showcmd
set showmatch
set pastetoggle=<F10>
set number
filetype plugin on
set grepprg=grep\ -nH\ $*
filetype indent on 
" set mouse in terminal to resize windows
"set mouse=a
set laststatus=2 

au BufNewFile,BufRead *.template set filetype=json


"GUI
"if has('gui_running')
"  set guioptions-=T  "remove toolbar
"  set guioptions-=r  "remove right-hand scroll bar
"else
"  let base16colorspace=256
"  set background=dark
"  colorscheme base16-solarized
"  " let g:solarized_termcolors=256
"  " set  background=light
"  " colorscheme solarized 
"endif
"
" au FileType tex set background=light | let g:solarized_termcolors=256 | colorscheme solarized 

cmap w!! %!sudo tee > /dev/null %
"tab navigation
"from Practical Vim book
nnoremap <silent> <C-H> :bprev<CR> 
nnoremap <silent> <C-L> :bnext<CR>
nnoremap <silent> [b :bprev<CR> 
nnoremap <silent> ]b :bnext<CR>
nnoremap <silent> [B :bfirst<CR>
nnoremap <silent> ]B :blast<CR>

" Reselect last pasted text
nnoremap gp `[v`]
" highlight search matching
" włączenie (zp) i wyłązenie (zP) korekty pisowni dla j.polskiego
map zp :setlocal spell spelllang=pl<CR>
map zP :setlocal nospell<CR>

" " włączenie (ze) i wyłączenie (zE) korekty pisowni dla j.angielskiego
map ze :setlocal spell spelllang=en<CR>
map zE :setlocal nospell<CR>
map zus :setlocal spell spelllang=en_us<CR>

if $TERM =~ '^screen-256color'
  map <Esc>OH <Home>
  map! <Esc>OH <Home>
  map <Esc>OF <End>
  map! <Esc>OF <End>
endif

fu! ToggleCurline ()
  if &cursorline && &cursorcolumn 
    set nocursorline
    set nocursorcolumn
  else
    set cursorline
    set cursorcolumn
  endif
endfunction

map <silent><leader>cl :call ToggleCurline()<CR>

imap jj <Esc>
nnoremap <S-CR> O<Esc>
nnoremap <CR> o<Esc>
map <Esc>OM <S-CR>

" Go
let mapleader = "\\"
au FileType go nmap <Leader>s <Plug>(go-implements)
au FileType go nmap <Leader>i <Plug>(go-info)
" au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1

"mutt
"
au BufRead /tmp/mutt-* set tw=78 

" Airline
"
"let g:airline#extensions#tabline#enabled = 1
"let g:airline_theme = 'wombat'
"let g:airline#extensions#tabline#buffer_nr_show = 0


"Goyo
let g:goyo_width=100

let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction

inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"

autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Code from:
" http://stackoverflow.com/questions/5585129/pasting-code-into-terminal-window-into-vim-on-mac-os-x
" then https://coderwall.com/p/if9mda
" and then https://github.com/aaronjensen/vimfiles/blob/59a7019b1f2d08c70c28a41ef4e2612470ea0549/plugin/terminaltweaks.vim
" to fix the escape time problem with insert mode.
"
" Docs on bracketed paste mode:
" http://www.xfree86.org/current/ctlseqs.html
" Docs on mapping fast escape codes in vim
" http://vim.wikia.com/wiki/Mapping_fast_keycodes_in_terminal_Vim

if !exists("g:bracketed_paste_tmux_wrap")
  let g:bracketed_paste_tmux_wrap = 1
endif

function! WrapForTmux(s)
  if !g:bracketed_paste_tmux_wrap || !exists('$TMUX')
    return a:s
  endif

  let tmux_start = "\<Esc>Ptmux;"
  let tmux_end = "\<Esc>\\"

  return tmux_start . substitute(a:s, "\<Esc>", "\<Esc>\<Esc>", 'g') . tmux_end
endfunction

let &t_SI .= WrapForTmux("\<Esc>[?2004h")
let &t_EI .= WrapForTmux("\<Esc>[?2004l")

function! XTermPasteBegin(ret)
  set pastetoggle=<f29>
  set paste
  return a:ret
endfunction

" auto paste mode
execute "set <f28>=\<Esc>[200~"
execute "set <f29>=\<Esc>[201~"
map <expr> <f28> XTermPasteBegin("i")
imap <expr> <f28> XTermPasteBegin("")
vmap <expr> <f28> XTermPasteBegin("c")
cmap <f28> <nop>
cmap <f29> <nop>
